@model IEnumerable<RentAndCycleCodeFirst.Models.CompanyLocation>

@{
    ViewBag.Title = "Map";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Locations</h2>
<div id="map" style="height:65vh"></div>
<br />

@foreach (var item in Model)
{
    <div data-location='{"latitude": "@(item.Lat)","longitude": "@(item.Lon)","description": "<strong>@(item.Company.Name)</strong><p>@(item.Company.Desc)</p>"}'></div>
}

@section scripts{
    <script type="text/javascript">
        /**
        * This is a simple JavaScript demonstration of how to call MapBox API to load the maps.
        * I have set the default configuration to enable the geocoder and the navigation control.
        * https://www.mapbox.com/mapbox-gl-js/example/popup-on-click/
        *
        * author Jian Liew <jian.liew@monash.edu>
        **/
        const TOKEN = "pk.eyJ1IjoieWVzdHIiLCJhIjoiY2swdndxejJnMTJjdzNjbjB4dW50dGRhZSJ9.mbdjf1J_F9B5fzSZo34H8A";
        // The first step is obtain all the latitude and longitude from the HTML
        var locations = [];
        $('[data-location]').each(function () {
            var loc = $(this).data("location")
            var longitude = loc.longitude;
            var latitude = loc.latitude;
            var description = loc.description;
            // Create a point data structure to hold the values.
            var point = {
                "latitude": latitude,
                "longitude": longitude,
                "description": description
            };
            // Push them all into an array.
            locations.push(point);
        });

        var data = [];
        for (i = 0; i < locations.length; i++) {
            var feature = {
                "type": "Feature",
                "properties": {
                    "description": locations[i].description,
                    "icon": "circle-15"
                },
                "geometry": {
                    "type": "Point",
                    "coordinates": [locations[i].longitude, locations[i].latitude]
                }
            };
            data.push(feature)
        }

        mapboxgl.accessToken = TOKEN;
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v10',
            zoom: 11,
            center: [locations[0].longitude, locations[0].latitude]
        });
        map.on('load', function () {
            // Add a layer showing the places.
            map.addLayer({
                "id": "places",
                "type": "symbol",
                "source": {
                    "type": "geojson",
                    "data": {
                        "type": "FeatureCollection",
                        "features": data
                    }
                },
                "layout": {
                    "icon-image": "{icon}",
                    "icon-allow-overlap": true
                }
            });
            map.addControl(new MapboxGeocoder({
                accessToken: mapboxgl.accessToken
            }));;
            map.addControl(new mapboxgl.NavigationControl());
            // When a click event occurs on a feature in the places layer, open a popup at the
            // location of the feature, with description HTML from its properties.
            map.on('click', 'places', function (e) {
                var coordinates = e.features[0].geometry.coordinates.slice();
                var description = e.features[0].properties.description;
                // Ensure that if the map is zoomed out such that multiple
                // copies of the feature are visible, the popup appears
                // over the copy being pointed to.
                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }
                new mapboxgl.Popup()
                    .setLngLat(coordinates)
                    .setHTML(description)
                    .addTo(map);
            });
            // Change the cursor to a pointer when the mouse is over the places layer.
            map.on('mouseenter', 'places', function () {
                map.getCanvas().style.cursor = 'pointer';
            });
            // Change it back to a pointer when it leaves.
            map.on('mouseleave', 'places', function () {
                map.getCanvas().style.cursor = '';
            });
        });
    </script>
}
