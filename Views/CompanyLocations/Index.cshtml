@model IEnumerable<RentAndCycleCodeFirst.Models.CompanyLocation>

@{
    ViewBag.Title = "Map";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Locations</h2>
<div class="container">
    <div class="row">
        <div class="col-sm-6">
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Company.Name)
                        </th>
                        <th>
                            Bike Count
                        </th>
                        <th>
                            Distance in km
                        </th>
                        <th style="display:none">
                            Lat
                        </th>
                        <th style="display:none">
                            Lon
                        </th>
                        @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
                        {
                            <th></th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        if (item.CompanyBikes.Count > 0 || (User.Identity.IsAuthenticated && User.IsInRole("Admin")))
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Company.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.CompanyBikes.Count)
                                </td>
                                <td>
                                    Input your location
                                </td>
                                <td style="display:none">
                                    @Html.DisplayFor(modelItem => item.Lat)
                                </td>
                                <td style="display:none">
                                    @Html.DisplayFor(modelItem => item.Lon)
                                </td>
                                @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
                                {
                                    <td>
                                        @Html.ActionLink("Add bike", "Create", "CompanyBikes", new { companyLocationId = item.Id }, null)
                                    </td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="col-sm-6">
            <div id="map" style="height:70vh"></div>
        </div>
    </div>
</div>


@*Hidden div to populate map*@
@foreach (var item in Model)
{
    if (item.CompanyBikes.Count > 0)
    {
        <div data-location='{"latitude": "@(item.Lat)","longitude": "@(item.Lon)","description": "<strong>@(item.Company.Name)</strong><p>@(item.Company.Desc)</p>"}'></div>
    }
}

@section scripts{
    @Scripts.Render("~/Scripts/DataTables/jquery.dataTables.js")
    @Scripts.Render("~/Scripts/DataTables/dataTables.bootstrap.js")
    <script src="https://npmcdn.com/@("@")turf/turf/turf.min.js"></script>
    <script type="text/javascript">
        var table = $('.table').DataTable({
            dom: "<'row'<'col-sm-12'tr>>" +
                "<'row'<'col-sm-12'p>>"
        });
        $('table tbody').on('click', 'tr', function () {
            var data = table.row(this).data();
            map.flyTo({
                center: [
                    data[4], // lon
                    data[3] // lat
                ],
                zoom: 15
            });
            $("html, body").animate({ scrollTop: 0 }, "slow");
        });

        /**
        * This is a simple JavaScript demonstration of how to call MapBox API to load the maps.
        * I have set the default configuration to enable the geocoder and the navigation control.
        * https://www.mapbox.com/mapbox-gl-js/example/popup-on-click/
        *
        * author Jian Liew <jian.liew@monash.edu>
        **/
        const TOKEN = "pk.eyJ1IjoieWVzdHIiLCJhIjoiY2swdndxejJnMTJjdzNjbjB4dW50dGRhZSJ9.mbdjf1J_F9B5fzSZo34H8A";
        // The first step is obtain all the latitude and longitude from the HTML
        var locations = [];
        $('[data-location]').each(function () {
            var loc = $(this).data("location")
            var longitude = loc.longitude;
            var latitude = loc.latitude;
            var description = loc.description;
            // Create a point data structure to hold the values.
            var point = {
                "latitude": latitude,
                "longitude": longitude,
                "description": description
            };
            // Push them all into an array.
            locations.push(point);
        });

        var data = [];
        for (i = 0; i < locations.length; i++) {
            var feature = {
                "type": "Feature",
                "properties": {
                    "description": locations[i].description,
                    "icon": "circle-15"
                },
                "geometry": {
                    "type": "Point",
                    "coordinates": [locations[i].longitude, locations[i].latitude]
                }
            };
            data.push(feature)
        }

        mapboxgl.accessToken = TOKEN;
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v10',
            zoom: 11,
            center: [locations[0].longitude, locations[0].latitude]
        });
        map.on('load', function () {
            // Add a layer showing the places.
            map.addLayer({
                "id": "places",
                "type": "symbol",
                "source": {
                    "type": "geojson",
                    "data": {
                        "type": "FeatureCollection",
                        "features": data
                    }
                },
                "layout": {
                    "icon-image": "{icon}",
                    "icon-allow-overlap": true
                }
            });

            map.addControl(new mapboxgl.NavigationControl());
            // When a click event occurs on a feature in the places layer, open a popup at the
            // location of the feature, with description HTML from its properties.
            map.on('click', 'places', function (e) {
                var coordinates = e.features[0].geometry.coordinates.slice();
                var description = e.features[0].properties.description;
                // Ensure that if the map is zoomed out such that multiple
                // copies of the feature are visible, the popup appears
                // over the copy being pointed to.
                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }
                new mapboxgl.Popup()
                    .setLngLat(coordinates)
                    .setHTML(description)
                    .addTo(map);
            });
            // Change the cursor to a pointer when the mouse is over the places layer.
            map.on('mouseenter', 'places', function () {
                map.getCanvas().style.cursor = 'pointer';
            });
            // Change it back to a pointer when it leaves.
            map.on('mouseleave', 'places', function () {
                map.getCanvas().style.cursor = '';
            });


            // Sort companies by distance
            map.addSource('single-point', {
                type: 'geojson',
                data: {
                    type: 'FeatureCollection',
                    features: [] // Notice that initially there are no features
                }
            });

            map.addLayer({
                id: 'point',
                source: 'single-point',
                type: 'circle',
                paint: {
                    'circle-radius': 10,
                    'circle-color': '#007cbf',
                    'circle-stroke-width': 3,
                    'circle-stroke-color': '#fff'
                }
            });

            geocoder.on('result', function (ev) {
                var searchResult = ev.result.geometry;
                map.getSource('single-point').setData(searchResult);

                table.rows().every(function () {
                    var data = this.data();

                    var to = turf.point([data[4], data[3]]);
                    var options = { units: 'kilometers' };
                    var distance = turf.distance(searchResult, to, options);

                    data[2] = Math.round(distance * 100) / 100;
                    this.data(data)
                })

                table
                    .order([2, 'asc'])
                    .draw();
            });
        });

        // Add geolocate control to the map.
        //map.addControl(new mapboxgl.GeolocateControl({
        //    positionOptions: {
        //        enableHighAccuracy: true
        //    },
        //    trackUserLocation: true,
        //}), 'top-left');

        // Sort companies by distance
        // https://docs.mapbox.com/help/tutorials/geocode-and-sort-stores/
        var geocoder = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken, // Set the access token
            mapboxgl: mapboxgl, // Set the mapbox-gl instance
            marker: false, // Do not use the default marker style
            bbox: [144.7044, -38.0635, 145.3416, -37.6058] // Set the bounding box coordinates
        });
        map.addControl(geocoder);
    </script>
}
<link href="~/Content/DataTables/css/dataTables.bootstrap.min.css" rel="stylesheet" />
@* Left align the Jquery datatable pagination buttons *@
<style>
    .dataTables_paginate {
        text-align: left !important;
    }
</style>