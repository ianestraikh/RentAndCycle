@model RentAndCycleCodeFirst.Models.CompanyBikeViewModel

@{
    ViewBag.Title = "Bikes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Bikes</h2>


@*@if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
{
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
}*@

@using (Html.BeginForm("Index", "CompanyBikes", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    // serialize company bike 
    for (int i = 0; i < Model.CompanyBikes.Count; i++)
    {
        @Html.HiddenFor(m => Model.CompanyBikes[i].Id)

        @Html.HiddenFor(m => Model.CompanyBikes[i].BikeId)
        @Html.HiddenFor(m => Model.CompanyBikes[i].Bike.Id)
        @Html.HiddenFor(m => Model.CompanyBikes[i].Bike.BikeModel)
        @Html.HiddenFor(m => Model.CompanyBikes[i].Bike.BrandId)
        @Html.HiddenFor(m => Model.CompanyBikes[i].Bike.Brand.Name)

        @Html.HiddenFor(m => Model.CompanyBikes[i].CompanyLocationId)
        @Html.HiddenFor(m => Model.CompanyBikes[i].CompanyLocation.Id)
        @Html.HiddenFor(m => Model.CompanyBikes[i].CompanyLocation.CompanyId)
        @Html.HiddenFor(m => Model.CompanyBikes[i].CompanyLocation.Lat)
        @Html.HiddenFor(m => Model.CompanyBikes[i].CompanyLocation.Lon)

        @Html.HiddenFor(m => Model.CompanyBikes[i].CompanyLocation.Company.Id)
        @Html.HiddenFor(m => Model.CompanyBikes[i].CompanyLocation.Company.Name)
        @Html.HiddenFor(m => Model.CompanyBikes[i].CompanyLocation.Company.Desc)

        @Html.HiddenFor(m => Model.CompanyBikes[i].Price)
        @Html.HiddenFor(m => Model.CompanyBikes[i].Count)
    }

    // if the user is not an admin, show dates to search
    if (!(User.Identity.IsAuthenticated && User.IsInRole("Admin")))
    {
        <div class="form-horizontal">
            <div class="form-group">
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @if (!Model.IsValid)
                    {
                        @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                    }
                    else
                    {
                        @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    }
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @if (!Model.IsValid)
                    {
                        @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                    }
                    else
                    {
                        @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    }
                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                </div>

                @if (!Model.IsValid)
                {
                    <div class="col-md-2">
                        <input type="submit" value="Search" class="btn btn-default" />
                    </div>
                }
                else
                {
                    <div class="col-md-2">
                        <input value="New Search" class="btn btn-default" onClick="location.href='@Url.Action("Index")';return false;" />
                    </div>
                }

            </div>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <br />

    }

    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.CompanyBikes.ElementAt(0).Bike.Brand)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CompanyBikes.ElementAt(0).Bike.BikeModel)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CompanyBikes.ElementAt(0).CompanyLocation.Company)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CompanyBikes.ElementAt(0).Price)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CompanyBikes.ElementAt(0).Rating)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.CompanyBikes)
            {
                if (item.Count > 0)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Bike.Brand.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Bike.BikeModel)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CompanyLocation.Company.Name)
                        </td>
                        <td>
                            $@Html.DisplayFor(modelItem => item.Price)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Rating)
                        </td>
                        <td>
                            @*if the user is an admin, allow crud*@
                            @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
                            {
                                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                            } else if (Model.IsValid)
                            {

                                @Html.ActionLink("Book", "Create", "Bookings", new { companyBikeId = item.Id, sDate = Model.StartDate.ToString("d/M/yyyy"), eDate = Model.EndDate.ToString("d/M/yyyy") }, null)
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@section Scripts {
    @Scripts.Render("~/Scripts/DataTables/jquery.dataTables.js")
    @Scripts.Render("~/Scripts/DataTables/dataTables.bootstrap.js")
    @Scripts.Render("~/Scripts/bootstrap-datepicker/js/bootstrap-datepicker.min.js")
    @Scripts.Render("~/Scripts/bootstrap-datepicker/locales/bootstrap-datepicker.en-AU.min.js")
    <script>
        $(document).ready(function () {
            $('.table').DataTable();

            // on change of the startdate set min date for the todate
            // https://stackoverflow.com/a/30456709/7587466
            $("#datepickerFrom").datepicker({
                format: 'dd/mm/yyyy',
                startDate: '+1d',
                autoclose: true
            }).on('changeDate', function (selected) {
                var minDate = new Date(selected.date.valueOf() + (1000 * 60 * 60 * 24));
                $('#datepickerTo').datepicker('setStartDate', minDate);
            });

            // on change of the todate set end date to the startdate
            $("#datepickerTo").datepicker({
                format: 'dd/mm/yyyy',
                startDate: '+2d',
                autoclose: true
            }).on('changeDate', function (selected) {
                var maxDate = new Date(selected.date.valueOf());
                $('#datepickerFrom').datepicker('setEndDate', maxDate);
            });
        });
    </script>
}
<link href="~/Content/DataTables/css/dataTables.bootstrap.min.css" rel="stylesheet" />
<link href="~/Scripts/bootstrap-datepicker/css/bootstrap-datepicker.min.css" rel="stylesheet" />
